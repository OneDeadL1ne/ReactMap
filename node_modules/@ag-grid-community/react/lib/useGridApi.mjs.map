{"version":3,"sources":["useGridApi.ts"],"names":[],"mappings":";AAAA,OAAO,EAAa,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAIvD,MAAM,WAAW,GAAG,CAAwB,OAAqB,EAAsC,EAAE;IACrG,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,QAAQ,CAAiB,IAAI,CAAC,CAAC;IAC7D,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,QAAQ,CAAmB,IAAI,CAAC,CAAC;IAEnE,SAAS,CAAC,GAAG,EAAE;QACX,IAAI,OAAO,IAAI,OAAO,CAAC,OAAO,EAAE;YAC5B,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;YAC/B,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAA;SAC1C;IACL,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAA;IAEb,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;AAChC,CAAC,CAAC;AAEF,eAAe,WAAW,CAAC","file":"useGridApi.mjs","sourcesContent":["import { RefObject, useEffect, useState } from 'react';\nimport { ColumnApi, GridApi } from '@ag-grid-community/core';\nimport { AgGridReact } from './agGridReact';\n\nconst useGridApis = <T extends AgGridReact>(gridRef: RefObject<T>): [GridApi | null, ColumnApi | null] => {\n    const [gridApi, setGridApi] = useState<GridApi | null>(null);\n    const [columnApi, setColumnApi] = useState<ColumnApi | null>(null);\n\n    useEffect(() => {\n        if (gridRef && gridRef.current) {\n            setGridApi(gridRef.current.api)\n            setColumnApi(gridRef.current.columnApi)\n        }\n    }, [gridRef])\n\n    return [gridApi, columnApi];\n};\n\nexport default useGridApis;"]}